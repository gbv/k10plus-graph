[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "K10plus Knowledge Graph",
    "section": "",
    "text": "Dependencies",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Einleitung</span>"
    ]
  },
  {
    "objectID": "index.html#dependencies",
    "href": "index.html#dependencies",
    "title": "K10plus Knowledge Graph",
    "section": "",
    "text": "pip install requests\nhttps://github.com/pg-format/pgraphs/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Einleitung</span>"
    ]
  },
  {
    "objectID": "index.html#nutzung",
    "href": "index.html#nutzung",
    "title": "K10plus Knowledge Graph",
    "section": "Nutzung",
    "text": "Nutzung\n\nErstelle .pg und .csv Dateien\npgraphs muss wie in https://github.com/pg-format/pgraphs/ beschrieben installiert sein. Mit make wird ein Property-Graph mit erstellt und daraus CSV-Dateien. Das erste mal kann dies ein paar Minuten dauern, da kxp-subjects sehr groß ist.\nIn some some_subjects.pg und den daraus entstandenen CSV-Dateien sind nur die ersten 4000000 Zeilen aus kxp-subjects.pg, da pgraphs nicht mit größeren Dateien umgehen kann.\n\n\nFühre die Dateien in Neo4j\nErstelle neo4j/import in pgraphs und verschiebe die CSV-Dateien in den Ordner.\nMit ./import.sh subjects in pgraphs/neo4j wird ein Neo4j docker erstellt mit den Inhalten der CSV-Dateien. Neo4j ist unter http://localhost:7474/browser/ zu finden, Username und Password müssen beim verbinden leer sein.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Einleitung</span>"
    ]
  },
  {
    "objectID": "index.html#datenmodell",
    "href": "index.html#datenmodell",
    "title": "K10plus Knowledge Graph",
    "section": "Datenmodell",
    "text": "Datenmodell\n# Knoten\n\n## Publikation\nTitle :title\n  ppn: string\n\n## Redirects (umgelenkte PPNs)\nRedirect :redirect\n  from: string # PPN\n  ppn: string\n  TODO: existiert noch nicht\n\n## Konzept (Schlagwort)\nConcept :concept\n  zusätzliche Label für die einzelnen Vokabulare (:bk :rvk ...)\n  notation: string\n\n# Kanten\n\nTitle -&gt; Concept :subject       # Sacherschließung\n\nConcept -&gt; Concept :broader     # Hierarchie\n\nConcept -&gt; Concept :mapping     # Sacherschließung mit Cocoda\n\n## Mapping\nMapping :mapping\n  uri: string\n  relation: string\n\nNutzen des Graphen\nIn dem Graph sind Sachgebiete von der PPN auf die Notation gerichtet.\nDurch Cypher Befehle kann man in Neo4j jetzt Informationen erhalten. Z. B. welche RVK-Notationen haben ein “exactMatch” oder “narrowMatch” mit BK-Notationen, die mit PPNs verbunden werden können MATCH p=((r:rvk)-[m]-&gt;(b:bk)&lt;-[]-(t:title)) WHERE m.relation = 'exactMatch' or m.relation = 'narrowMatch' RETURN p. Mit so einer Frage ließen sich PPNs finden, die noch mit RVK angereichert werden können.\nMATCH (b:bk) RETURN b und MATCH (r:rvk) RETURN r geben jeweils die komplette Klassifikation und ihre Hierarchie zurück.\nMit MATCH p=(t:title)-[]-&gt;() WHERE t.ppn = \"010000844\" RETURN p lassen sich alle Sachgebiete einer bestimmten PPN ausgeben, in diesem Fall 010000844.\nAndersrum lässt sich mit MATCH p=()-[r:subject]-&gt;(r:rvk) WHERE r.notation = \"MS 2870\" RETURN p finden, wie viel ein Sachgebiet in K10plus genutzt wird.\nMit MATCH p=((r:rvk)-[]-&gt;(b:bk)) WHERE b.notation = \"17.03\" RETURN p lassen sich alle Mappings eine Notation anzeigen.\nCYPHER queries for each query type:\noccurrences:\nMATCH (t:title)-[]-&gt;(n:?) WHERE n.notation = \"?\" RETURN count(t) AS freq\ncoOccurrences:\nMATCH (t:title)-[]-&gt;(n:?) WHERE n.notation = \"?\" MATCH (t)-[]-&gt;(m:?) RETURN head(LABELS(m)), m.notation, count(m) AS freq\nsubjects:\nMATCH (t:title)-[]-&gt;(n) WHERE t.ppn = \"?\" RETURN head(LABELS(n)), n.notation\nrecords:\nMATCH (t:title)-[]-&gt;(n:?) WHERE n.notation = \"?\" RETURN t.ppn LIMIT ?\nCYPHER queries with their respective sample query:\noccurrences of RVK DG 9000\nMATCH (t:title)-[]-&gt;(r:rvk) WHERE r.notation = \"DG 9000\" RETURN count(t)\nco-occurrences of RVK DG 9000 in BK\nMATCH (t:title)-[]-&gt;(r:rvk) WHERE r.notation = \"DG 9000\" MATCH (t)-[]-&gt;(b:bk) RETURN head(LABELS(b)), b.notation, count(b)\nco-occurrences of RVK DG 9000 in all vocabularies\nMATCH (t:title)-[]-&gt;(r:rvk) WHERE r.notation = \"DG 9000\" MATCH (t)-[]-&gt;(n) WHERE not LABELS(n) = [\"rvk\"] RETURN head(LABELS(n)), n.notation, count(n)\nco-occurrences of RVK DG 9000 in all vocabularies (including RVK)\nMATCH (t:title)-[]-&gt;(r:rvk) WHERE r.notation = \"DG 9000\" MATCH (t)-[]-&gt;(n) RETURN head(LABELS(n)), n.notation, count(n)\nsubjects of a record (all vocabularies)\nMATCH (t:title)-[]-&gt;(n) WHERE t.ppn = \"012401471\" RETURN head(LABELS(n)), n.notation\nsubjects of a record (selected vocabulary)\nMATCH (t:title)-[]-&gt;(r:rvk) WHERE t.ppn = \"012401471\" RETURN head(LABELS(r)), r.notation\nrecords of a subject\nMATCH (t:title)-[]-&gt;(b:bk) WHERE b.notation = \"20.04\" RETURN t.ppn",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Einleitung</span>"
    ]
  }
]